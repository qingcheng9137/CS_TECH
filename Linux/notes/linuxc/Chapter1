1.大一大二的数学课学过之后不知道做什么用，到大三大四明白了的时候却忘完了，回头重新学又发现很多东西根本没有明白。这么来说大一大二的时间就白花了。

2.C语言是很难的编程语言，不明白编译原理，操作系统，计算机体系结构就根本不可能学明白。

3.数学是一个程序员最重要的修养，计算机科学其实就是数学的一个分支。

4.Linux是一种开源的操作系统，任何的疑问都可以从源代码和文档中找到答案。而Windows却是封闭的操作系统。Windows平台上的开发工具和各种集成开发环境绑在一起，IDE对于初学者是很糟糕的事情。用熟练了Windows下的IDE，那么对编译器，链接器，Makefile就根本没有概念（这些东西应该在初学编程就应该拥有）。

5.程序告诉计算机如何完成一个计算任务，这里的计算是数学计算。从根本上说，计算机是数字电路组成的运算机器，只能对数字进行运算。数字经过专门的硬件设备转换成人们可以听到的看到的声音和图像。程序由一系列指令组成（指示计算机进行某种运算的命令），包括：输入，输出，基本运算，测试分支（测试某一个条件，根据不同的测试结果执行不同的后续指令），循环。编写程序可以说就是：把复杂的任务分解成子任务，把子任务分解成更简单的任务，层层分解，直到最后简单的可以用上面的指令完成。

6.编程语言分为低级语言，高级语言。机器语言和汇编语言是低级语言（直接用计算机的指令编写程序），而C，C++，java,python则是高级语言（用语句编写程序，语句是计算机指令的抽象表示）

7.机器语言完全由十六进制数字组成。最早的程序员都是直接用机器语言编程,但是很麻烦,需要查大量的表格来确定每个数字表示什么意思,编写出来的程序很不直观,而且容易出错,于是有了汇编语言,把机器语言中一组一组的数字用助记符(Mnemonic)表示,直接用这些助记符写出
汇编程序,然后让汇编器(Assembler)去查表把助记符替换成数字,也就把汇编语言翻译成了机器语

8.一条a=b+1的c语言的语句翻译成三条汇编或者机器指令，这个过程是编译，由编译器完成，而汇编器则是把汇编语言翻译成机器语言（一一对应）。

9.平台：计算机体系结构，操作系统，开发平台（编译器，链接器）。不同的计算机体系结构有着不同的指令集，可以识别的机器指令格式不同，直接用某种体系结构的汇编或者机器指令写出来的程序只能在这种体系结构的计算机上运行，然而各种体系结构的计算机都有各自的C编译器，可以把C程序编译成各种不同体系结构的机器指令（也就是说用C语言写的程序只需要稍加修改甚至不用修改就可以在各种不同的计算机上编译运行）。绝大部分程序都使用高级语言写的（因为他们有类似C的优势），只有和硬件关系密切的少数程序（比如驱动程序）才用到低级语言。另外：即使在相同的体系结构和操作系统下，用不同的C编译器（或者是不同的版本）编译同一个程序得到的结果也可能不同。

10. .out文件一般上就是可执行文件（经过编译之后的文件，包括翻译源代码之后生成的机器指令，还有一些描述信息），可执行文件被操作系统加载运行，计算机执行该文件中由编译器生成的指令。

11.有些高级语言以解释的方式执行。解释执行的过程不同于C语言编译执行的过程。例如Shell脚本，用到了/bin/sh解释器，它把脚本中的每一行当成一条命令解释执行，也不需要先生成包含机器指令的可执行文件再去执行。如果把脚本中的三行当成三条命令直接敲到Shell提示符下也可以得到同样的结果。

12.机器语言是第一代语言，汇编语言是第二代语言，C，JAVA，PYTHON是第三代语言（3GL）。而4GL以后的编程语言更多的描述做什么而不是描述具体一步一步怎么做（一步一步怎么做由编译器或者解释器决定，例如SQL语言）

13.自然语言是人类讲的语言（不是人为设计而是自然进化的），形式语言是为了特定应用而人为设计的语言（例如数学家用的数字和运算符号），编程语言也是一种形式语言，专门设计用来表达计算过程的形式语言。形式语言有严格的语法规则，语法规则由符号和结构（结构是指符号的排列方式）的规则组成。

14.Debug需要程序员概念明确，逻辑清晰，性格沉稳，还需要一些运气。

15.Bug分成三种：编译时的错误（一般不符合语法规则，出现了语法错误），运行时的错误（编译器能够通过，但是运行的时候会出错而导致程序崩溃），逻辑错误或者语义错误（程序编译和运行都很顺利，但是程序没有干我们想让他干的事情。我们需要非常清晰的头脑去解决这种问题。）

16.关于调试（Debug），有一个想法是编程的过程应该总是从一个能正确运行的小规模程序开始，每做一次小的改动就立刻进行调试，这样的好处是我们总是有一个正确的程序。（事实上，Linux的进化就是这样来的，他的内存管理，设备管理，文件系统，网络等等大的模块所组成的Linux操作系统就是由很小的部分发展而来的）
$ gcc main.c
$ ./a.out
$ gcc main.c -o main //这个用来改变名字
$ gcc -Wall main.c



